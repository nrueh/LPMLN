% Model for a triplex steer-by-wire control system.


% *Objects*
sorts
#battery = {batteryA, batteryB}.
#processor = {processor1, processor2, processor3}.
#steering_sensor = {steering_sensor1, steering_sensor2, steering_sensor3}.
#wheel_sensor = {wheel_sensor1, wheel_sensor2, wheel_sensor3}.
#motor_controller = {motor_controller1, motor_controller2}.
#two_of_three_voter = {two_of_three_voter1, two_of_three_voter2}.
% device = processor + motor + sensor.
#device = {processor1, processor2, processor3,
          motor_controller1, motor_controller2,
          steering_sensor1, steering_sensor2, steering_sensor3,
          wheel_sensor1, wheel_sensor2, wheel_sensor3}.
% component = battery + processor3 + steering_sensor + wheel_sensor +
%                     + motor_controller + two_of_three_voter.
#component = {batteryA, batteryB,
             processor1, processor2, processor3,
             steering_sensor1, steering_sensor2, steering_sensor3,
             wheel_sensor1, wheel_sensor2, wheel_sensor3,
             motor_controller1, motor_controller2,
             two_of_three_voter1, two_of_three_voter2}.
#component_status =  {intact, detectedBroken, silentBroken}.
#boolean = {true,false}.
#brokenState = {detectedBroken, silentBroken}.

attributes
is_broken_state: #component_status->#boolean.
is_battery: #battery -> #boolean.
is_processor: #processor -> #boolean.
is_motor_controller: #motor_controller -> #boolean.
is_voter: #two_of_three_voter -> #boolean.
is_wheel_sensor: #wheel_sensor ->#boolean.
is_steering_sensor: #steering_sensor -> #boolean.
connected: #component, #component -> #boolean.
powered:   #device -> #boolean.
status: #component -> #component_status.
operational: #component -> #boolean.
system_failure: #boolean.

% **Introduced for modeling purposes**

broken : #component -> #boolean.
valid_world: #boolean.

% *Rules*

% **Connections**
statements
is_battery(B).
is_processor(P).
is_motor_controller(MC).
is_voter(V).
is_wheel_sensor(W).
is_steering_sensor(S).


connected(batteryA, processor1).
connected(batteryA, processor2).
connected(batteryA, steering_sensor1).
connected(batteryA, steering_sensor2).
connected(batteryA, wheel_sensor1).
connected(batteryA, wheel_sensor2).
connected(batteryA, motor_controller1).

connected(batteryB, processor2).
connected(batteryB, processor3).
connected(batteryB, streering_sensor2).
connected(batteryB, streering_sensor3).
connected(batteryB, wheel_sensor2).
connected(batteryB, wheel_sensor3).
connected(batteryB, motor_controller2).

% Processors 1, 2, and 3 are each connected to each two-of-three-voter. 
connected(P,V) :- is_processor(P), is_voter(V).

% Voter n is connected to motor-controler n for n in {1,2}.
connected(V, MC) :- is_voter(V), is_motor_controller(MC).

% Each sensor is connected to each processor.
connected(S, P):- is_processor(P), is_steering_sensor(S).
connected(W, P):-is_wheel_sensor(W), is_processor(P) .

% commutativity.
% connected(Component1, Component2) :- connected(Component2, Component1).

% *Power*

% A component is powered if and only if
% it is connected to an operational battery.
powered(Component) :- connected(B,Component), operational(B),is_battery(B).
powered(Component) = false :- not powered(Component) = true.

% *Component status*


% Components may be broken, with the following probabilities: 
% i. battery:  1E-6
% ii. processor:  5E-7
% iii. motor controler : 1E-7
% iv. voter: 1E-7
% v. wheel sensor:   1E-7
% vi. steering sensor:  2E-6

%[r_broken(Component)] random(broken(Component)).
%[r_broken(Component)] pr(broken(Battery) = true ) = 1/1000000.
%[r_broken(Component)] pr(broken(Processor) = true ) = 5/10000000.
%[r_broken(Component)] pr(broken(Motor_controller) = true ) = 1/10000000.
%[r_broken(Component)] pr(broken(Voter) = true ) = 1/10000000.
%[r_broken(Component)] pr(broken(Wheel_sensor ) = true ) = 1/10000000.
%[r_broken(Component)] pr(broken(Steering_sensor ) = true ) = 2/1000000.


 random(broken(Component)).
 pr(broken(B) = true|is_battery(B)) = 1/2.
 pr(broken(P) = true|is_processor(P)) = 1/2. 
 pr(broken(MC) = true|is_motor_controller(MC)) = 1/2.
 pr(broken(V) = true|is_voter(V)) = 1/2.
 pr(broken(W) = true |is_wheel_sensor(W)) = 1/2.
 pr(broken(S) = true|is_steering_sensor(S) ) = 1/2.


% *Component Operation*

% All componnets are normally operational
operational(Component) = true :- not operational(Component) = false.

% Any processor, battery, motor controler, or sensor which is not powered
% is not operational.
operational(P) = false :- powered(P) = false, is_processor(P).
operational(MC) = false :- powered(MC) = false,is_motor_controller(MC).
operational(S) = false :- powered(S) = false,is_steering_sensor(S).
operational(W) = false :- powered(W) = false,is_wheel_sensor(W).

% Any component that is broken, either silently or detectably, is not operational.

is_broken_state(detectedBroken).
is_broken_state(silentBroken).

random(status(Component),is_broken_state) :- broken(Component) = true,valid_world = true.
% 90% of breakages are detectable.
pr(status(Component) = detectedBroken |  broken(Component) = true)=9/10.



operational(Component) = false :- broken(Component) = true.


% If two of the three processors connected to a two-of-three voter
% is non-operational, the voter is non-operational

operational(V) = false :- connected(V, P1), connected(V, P2),
                              operational(P1) = false, P2 <> P1,
                              operational(P2) = false,
                              is_processor(P1), is_processor(P2), is_voter(V).


% *System failure*

% System failure occurs if either motor controler is operational,
system_failure :- operational(MC) = false, is_motor_controller(MC).

% System failure occurs if a majority of wheel sensors is non-operational
system_failure :- operational(W1)=false, operational(W2)=false,
                 W2 <> W1, is_wheel_sensor(W1),is_wheel_sensor(W2).


% System failure occure if a majority of steering sensors is non-operational. 
system_failure :- operational(S1)=false, 
                  operational(S2)=false,
                  S2 <> S1, is_steering_sensor(S1),is_steering_sensor(S2).

% we only consider possible worlds where system fails or no more than four components fail 
valid_world = false:- broken(Component1) = true,
                      broken(Component2) = true,
                      broken(Component3)= true,
                      broken(Component4) = true,
                      broken(Component5) = true,
                      Component1<>Component2, Component1<>Component3,
                      Component1<>Component4, Component1<>Component5,
                      Component2<>Component3, Component2<>Component4,
                      Component2<>Component5, Component3<>Component4,
                      Component3<>Component5, Component4<>Component5.

valid_world = true :- not valid_world = false.



% *Queries*

% Probability of failure
obs(valid_world,true).

?system_failure = true.


