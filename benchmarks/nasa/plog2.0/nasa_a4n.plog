% Model for a triplex steer-by-wire control system.

sorts
#battery = {b1,b2}.
#processor = {p1,p2,p3}.
#motor_controller = {mc1,mc2}.
#steering_sensor = {ss1, ss2, ss3}.
#wheel_sensor = {ws1, ws2, ws3}.
#two_of_three_voter = {v1, v2}.
#component = {b1,b2,p1,p2,p3,mc1,mc2,ss1,ss2,ss3,ws1,ws2,ws3,v1,v2}.
#boolean = {true,false}.

attributes
broken : #component -> #boolean.
lessthan5broken :#boolean.
is_battery: #battery -> #boolean.
is_processor: #processor -> #boolean.
is_motor_controller: #motor_controller -> #boolean.
is_voter: #two_of_three_voter -> #boolean.
is_wheel_sensor: #wheel_sensor ->#boolean.
is_steering_sensor: #steering_sensor -> #boolean.


statements
is_battery(B).
is_processor(P).
is_motor_controller(MC).
is_voter(V).
is_wheel_sensor(W).
is_steering_sensor(S).

% *Component status*
% Components may be broken, with the following probabilities: 
% i. battery:  1E-6
% ii. processor:  5E-7
% iii. motor controler : 1E-7
% iv. voter: 1E-7
% v. wheel sensor:   1E-7
% vi. steering sensor:  2E-6

 random(broken(Component)).
 pr(broken(B) = true|is_battery(B)) = 1/2.
 pr(broken(P) = true|is_processor(P)) = 1/2. 
 pr(broken(MC) = true|is_motor_controller(MC)) = 1/2.
 pr(broken(V) = true|is_voter(V)) = 1/2.
 pr(broken(W) = true |is_wheel_sensor(W)) = 1/2.
 pr(broken(S) = true|is_steering_sensor(S) ) = 1/2.


lessthan5broken = false:- broken(Component1) = true,
                      broken(Component2) = true,
                      broken(Component3)= true,
                      broken(Component4) = true,
                      broken(Component5) = true,
                      Component1<>Component2, Component1<>Component3,
                      Component1<>Component4, Component1<>Component5,
                      Component2<>Component3, Component2<>Component4,
                      Component2<>Component5, Component3<>Component4,
                      Component3<>Component5, Component4<>Component5.

lessthan5broken = true :- not lessthan5broken = false.
% *Queries*

% Probability of failure

? lessthan5broken = true .
